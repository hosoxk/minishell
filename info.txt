# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    info.txt                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: yde-rudd <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/10/16 21:58:14 by yde-rudd          #+#    #+#              #
#    Updated: 2024/12/16 14:46:43 by yde-rudd         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #
- builtins:
	- echo:
		prints text to the terminal, if the -n option is passed, it should not append a newline
	- cd:
		changes the current working directory, using either an absolute or relative path
	- pwd:
		prints the current working directory
	- export:
		adds or modifies environment variables in the shell's environment
	- unset:
		removes environment variables from the shell environment
	- env:
		displays all environment variables currently set in the shell
	- exit:
		exits the shell with a specific exit status
- env variables:
	in a shell, evironment variables store values that affect the behavior of processes.
	they are essentially key-value pairs that are passed from the shell to it's child processes
	- expanding environment variables:
		when a user enters something like $HOME, it should expand the value of the HOME environment variable
	- implementing export and unset builtins:
		- export should add or modify environment variables
		- unset should remove them
	- passing environment variables to child process:
		when executing external commands, the shell should pass the current environment to the new process
	- handling special varibales like &?:
		this should expand to the exit status of the last command executed
- signal handling:
	shells need to handle various signals that are sent to them by the operating system
	or by the user. signals are asynchronous events that interrupt the normal flow of program execution
	- SIGINT(ctrl + C):
		this signal is sent when the user presses ctrl+C in a typical shell, this interrupts the current
		foreground process, but the shell itself should not exit. instead, it should return to prompt
		the user for another command
	- ctrl + D:
		should exit the shell(EOF signal)
	- SIGQUIT(ctrl + \):
		typically terminates a running process and generates a core dump. like SIGINT, it should not
		kill the sell but should only affect the current running process
	- reset signals for child processes:
		when the shell spawns a new process(using fork()), the signals should behave normally in the
		child(so ctrl+C or ctrl+\ should terminate the child process as usual)

allowed functions:
		READLINE LIB
		============
- readline:
	reads a line of input from the user, offering line editing and history features
- rl_clear_history:
	clears the readline history of all entries
- rl_on_new_line:
	resets the line state in readline after modifications, preparing for new input
- rl_replace_line:
	replaces the current input line with the provided strings
- rl_redisplay:
	redisplays the current readline buffer on the terminal
- add_history:
	adds the most recent input line to the history list
		STANDARD LIB
		===========
- printf:
	formats and prints data to standard output
- malloc:
	allocates a block of memory dynamically on the heap
- free:
	frees previously allocated memory
- write:
	writes data to a fd, such as standard output or a file
		FILE AND DIRECTORY HANDLING
		===========================
- access: /better use stat!
	checks if the calling process has permissions to access a file(RWX)
- open:
	opens a file and returns a fd
- read:
	reads data from a fd into a buffer
- close:
	closes an open fd
- getcwd:
	retrieves the current working directory
- chdir:
	changes the current working directory
- stat:
	retrieves information about a file(e.g., size, permissions)
- lstat:
	similar to stat, but works for symbolic links
- fstat:
	gets a file status for an open fd
- unlink:
	deletes a file
- opendir:
	opens a directory stream for reading its contents
- readdir:
	reads an entry from a directory stream
- closedir:
	closes a directory stream
		PROCESS CONTROL
		===============
- fork:
	creates a new process(child process) by duplicating the current process
- wait:
	waits for a child process to finish
- waitpid:
	waits for a specific child process to finish
- wait3:
	waits for a child process to terminate and also returns resource usage statistics
- wait4:
	similar to wait3, but allows waiting on specific child processes
- execve:
	replaces the current process image with a new one, specified by the program name
- exit:
	terminates the current process and returns an exit status to the parent
		SIGNAL HANDLING
		===============
- signal:
	sets a signal handler for a specific signal
- sigaction:
	more flexible and modern alternative to signal for setting signal handlers
- sigemptyset:
	initialized a signal set to exclude all signals
- sigaddset:
	adds a specific signal to a signal set
- kill:
	sends a signal to a process
		TERMINAL I/O CONTROL
		====================
- isatty:
	checks if a fd refers to a terminal
- ttyname:
	returns the name of the terminal associated with a fd
- ttyslot:
	finds the index of the terminal in the /etc/ttys file
- ioctl:
	performs control operations on devices(often used with terminal devices)
		TERMCAP(TERMINAL CAPABILITIES)
		==============================
- tgetent:
	loads the terminal description for the current terminal type
- tgetflag:
	gets the boolean value of a capability from the terminal description
- tgetnum:
	gets the numeric value of a terminal capability
- tgetstr:
	retrieves a string capability from the terminal description
- tgoto:
	computes the control string for cursor movement on a terminal
- tputs:
	outputs a string with padding for slow terminals
		ERROR HANDLING AND ENVIRONMENT
		==============================
- strerror:
	converts an error number into a readable string describing the error
- perror:
	prints a description of the last error that occures during a system call
- getenv:
	retrieves the value of an environment variable
		TERMINAL
		========
- tcsetattr:
	sets terminal attributes(such as input mode or output speed)
- tcgetattr:
	retrieves the current terminal attributes
